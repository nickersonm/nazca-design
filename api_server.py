# Do not edit this file
# Bright Photonics B.V. (c) 2024

from fastapi import FastAPI, APIRouter, Depends, Header, HTTPException
from pydantic import BaseModel
from typing import Type, Union, List, Dict, Any
import base64
import json

from nazca import Cell, Tables
from nazca.interconnects import Interconnect
from nazca.serializer import to_dict, from_dict


import get_api as module

tech = "pdk_get_api"

app = FastAPI()

instances: Dict[int, Any] = {}


def extract_payload(authorization: str = Header(None)):
    if authorization is None:
        print(f"{authorization = }")
        raise HTTPException(status_code=401, detail="Authorization header missing")
    try:
        token = authorization.split(" ")[1]  # Assuming 'Bearer <token>'
        header, payload, signature = token.split(".")
        payload += "=" * (-len(payload) % 4)  # padding
        decoded_payload = base64.urlsafe_b64decode(payload).decode("utf-8")
        payload_dict = json.loads(decoded_payload)
        print(f"{payload_dict = }")
        get_route_info = payload_dict["subscribe"][tech]
        print(f"{get_route_info = }")
        return payload_dict
    except Exception as e:
        print(f"{e = }")
        raise HTTPException(status_code=401, detail=f"Invalid token: {e}")


@app.get("/health")
def get_health(payload: dict = Depends(extract_payload)):
    return {"status": "ok"}


class Get_apisModel(BaseModel):
    payload: dict = {}


@app.post("/get_apis")
def get_apis(item: Get_apisModel, payload: dict = Depends(extract_payload)):
    try:
        return to_dict(data=module.get_apis(item.payload))
    except Exception as e:
        print(f"Error: {e}")
        raise


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8005)
