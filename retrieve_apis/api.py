# Do not edit this file
# Bright Photonics B.V. (c) 2024

import sys
import os
import httpx
import time
import base64
import json
from itertools import count
from typing import Any, Type, Union, List, Dict

from nazca.serializer import from_dict, to_dict
from nazca import Cell, Tables
from nazca import cellcache_util
from nazca.cellcache_util import ndcache
from nazca.interconnects import Interconnect
from nazca.util import load_nazca_cloud_connections, save_nazca_cloud_connections


credentials_path = os.path.expanduser(os.path.join("~", "nazca_cloud_credentials.json"))
server_configs = load_nazca_cloud_connections(credentials_path)
select = server_configs["select"]
connections = server_configs["connections"]
connection = connections[select]


cellcache_util.sqlite_flag = True
client = httpx.Client()
_ids = count(1)

base_url = ""
route = ""
headers = {}
timeout = 10
buffer_time = 60


def token_not_expired():
    """Check if the token is not expired."""
    global token, port
    if token != "":
        if port != "":  # local server
            return True
        header, payload, signature = token.split(".")
        payload += "=" * (-len(payload) % 4)  # padding
        decoded_payload = base64.urlsafe_b64decode(payload).decode("utf-8")
        payload_dict = json.loads(decoded_payload)
        current_time = time.time() + buffer_time
        if current_time > payload_dict.get("exp", 0):
            if not refresh_token():
                print("Token is expired. " f"Cannot connect to the Nazca server at {base_url}.")
            else:
                return True
    return False


def refresh_token():
    """Use refresh token to get a new access token."""
    global token
    try:
        response = httpx.post(
            f"https://cloud.nazca-design.org/authentication/refresh_token",
            json={"refresh_token": connection["refresh_token"]},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        message = response.json().get("message", False)
        if message:
            print(f"An HTTP error occurred: {message}")
            return False
        else:
            print(f"An HTTP error occurred: {err}")
            if hasattr(err, "response") and isinstance(err.response, httpx.Response):
                try:
                    error_message = err.response.json().get("error", "Unknown error")
                except ValueError:
                    error_message = "Unknown error"
            else:
                error_message = "Unknown error"
            print(f"Server error: {error_message}")
            raise ("Cannot refresh token.")
    except Exception as err:
        print(f"An error occurred: {err}")
        raise ("Cannot refresh token.")
    json_response = response.json()
    # json_response = {"refresh_token": "1234", "token": "ABCD"}
    token = f"Bearer {json_response.get('token', '')}"
    headers["Authorization"] = token
    refresh_token = json_response.get("refresh_token", "")
    connection["refresh_token"] = refresh_token
    connection["headers"] = headers
    server_configs["connections"][select] = connection
    save_nazca_cloud_connections(filename=credentials_path, server_configs=server_configs)
    return True


def check_server_health():
    """Check if the server is healthy and running, as well if the token is valid."""
    token_not_expired()
    try:
        response = httpx.get(f"{base_url}/health", headers=headers)
        response.raise_for_status()  # Raises an HTTPError if the status is 4xx, 5xx
    except httpx.HTTPStatusError as exc:
        if exc.response.status_code == 403:
            raise PermissionError(
                f"Access forbidden to the Nazca get_api PDK server at {base_url}. Please check your permissions."
            ) from None
        else:
            raise ConnectionError(
                f"HTTP error occurred while connecting to the Nazca PDK server at {base_url}: {exc}"
            ) from None
    except httpx.RequestError as exc:
        raise ConnectionError(
            f"Cannot connect to the Nazca PDK server at {base_url}. Please check if the server is running."
        )
    print(f"Nazca {route[1:]} PDK server healthy at {base_url}.")
    return


def set_server(target: str):
    global base_url, headers, token, port
    conn = connection
    base_url = conn["base_url"]
    headers = conn["headers"]
    token = headers.get("Authorization", "")
    if token != "":
        token.replace("Bearer ", "")
    port = conn.get("port", "")
    if port != "":
        base_url = f"{base_url}:{port}"
    base_url = f"{base_url}{route}"
    try:
        check_server_health()
    except (PermissionError, ConnectionError) as e:
        print(e)
        sys.exit(1)


set_server(connection)


@ndcache()
def get_apis(payload: dict = {}) -> dict:
    """Get API file.

    Args:
        payload (dict): valid API as identified in the request payload.

    Returns:
        dict: {pdkname, API_py_file}
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/get_apis", json={"payload": payload}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


if __name__ == "__main__":
    check_server_health()
