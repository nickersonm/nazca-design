# Do not edit this file
# Bright Photonics B.V. (c) 2024

import sys
import os
import httpx
import time
import base64
import json
from itertools import count
from typing import Any, Type, Union, List, Dict

from nazca.serializer import from_dict, to_dict
from nazca import Cell, Tables
from nazca import cellcache_util
from nazca.cellcache_util import ndcache
from nazca.interconnects import Interconnect
from nazca.util import load_nazca_cloud_connections, save_nazca_cloud_connections


credentials_path = os.path.expanduser(os.path.join("~", "nazca_cloud_credentials.json"))
server_configs = load_nazca_cloud_connections(credentials_path)
select = server_configs["select"]
connections = server_configs["connections"]
connection = connections[select]


cellcache_util.sqlite_flag = True
client = httpx.Client()
_ids = count(1)

base_url = ""
route = "/demofab"
headers = {}
timeout = 10
buffer_time = 60


def token_not_expired():
    """Check if the token is not expired."""
    global token, port
    if token != "":
        if port != "":  # local server
            return True
        header, payload, signature = token.split(".")
        payload += "=" * (-len(payload) % 4)  # padding
        decoded_payload = base64.urlsafe_b64decode(payload).decode("utf-8")
        payload_dict = json.loads(decoded_payload)
        current_time = time.time() + buffer_time
        if current_time > payload_dict.get("exp", 0):
            if not refresh_token():
                print("Token is expired. " f"Cannot connect to the Nazca server at {base_url}.")
            else:
                return True
    return False


def refresh_token():
    """Use refresh token to get a new access token."""
    global token
    try:
        response = httpx.post(
            f"https://cloud.nazca-design.org/authentication/refresh_token",
            json={"refresh_token": connection["refresh_token"]},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        message = response.json().get("message", False)
        if message:
            print(f"An HTTP error occurred: {message}")
            return False
        else:
            print(f"An HTTP error occurred: {err}")
            if hasattr(err, "response") and isinstance(err.response, httpx.Response):
                try:
                    error_message = err.response.json().get("error", "Unknown error")
                except ValueError:
                    error_message = "Unknown error"
            else:
                error_message = "Unknown error"
            print(f"Server error: {error_message}")
            raise ("Cannot refresh token.")
    except Exception as err:
        print(f"An error occurred: {err}")
        raise ("Cannot refresh token.")
    json_response = response.json()
    # json_response = {"refresh_token": "1234", "token": "ABCD"}
    token = f"Bearer {json_response.get('token', '')}"
    headers["Authorization"] = token
    refresh_token = json_response.get("refresh_token", "")
    connection["refresh_token"] = refresh_token
    connection["headers"] = headers
    server_configs["connections"][select] = connection
    save_nazca_cloud_connections(filename=credentials_path, server_configs=server_configs)
    return True


def check_server_health():
    """Check if the server is healthy and running, as well if the token is valid."""
    token_not_expired()
    try:
        response = httpx.get(f"{base_url}/health", headers=headers)
        response.raise_for_status()  # Raises an HTTPError if the status is 4xx, 5xx
    except httpx.HTTPStatusError as exc:
        if exc.response.status_code == 403:
            raise PermissionError(
                f"Access forbidden to the Nazca demofab PDK server at {base_url}. Please check your permissions."
            ) from None
        else:
            raise ConnectionError(
                f"HTTP error occurred while connecting to the Nazca PDK server at {base_url}: {exc}"
            ) from None
    except httpx.RequestError as exc:
        raise ConnectionError(
            f"Cannot connect to the Nazca PDK server at {base_url}. Please check if the server is running."
        )
    print(f"Nazca {route[1:]} PDK server healthy at {base_url}.")
    return


def set_server(target: str):
    global base_url, headers, token, port
    conn = connection
    base_url = conn["base_url"]
    headers = conn["headers"]
    token = headers.get("Authorization", "")
    if token != "":
        token.replace("Bearer ", "")
    port = conn.get("port", "")
    if port != "":
        base_url = f"{base_url}:{port}"
    base_url = f"{base_url}{route}"
    try:
        check_server_health()
    except (PermissionError, ConnectionError) as e:
        print(e)
        sys.exit(1)


set_server(connection)


@ndcache()
def a2s() -> Type[Cell]:
    """Create an Active to Shallow waveguide transition

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/a2s", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def abb_eopm_dc(length: float = 750, contacts: int = 2) -> Type[Cell]:
    """Create an electro-optic phase modulator cell.

    Args:
        length (float): length of the modulator section in um

    Returns:
        Cell: eopm element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/abb_eopm_dc",
            json={"length": length, "contacts": contacts},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def apply_coating(cell: Type[Cell], west_coating: str, east_coating: str) -> Type[Cell]:
    """None"""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/apply_coating",
            json={"cell": to_dict(data=cell), "west_coating": west_coating, "east_coating": east_coating},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def awg1x4() -> Type[Cell]:
    """Creates a 1x4 AWG cell

    Returns:
        Cell: AWG element
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/awg1x4", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def cell_template(
    die_width: float = 5000, die_height: float = 5000, cellname: str = "MPW_CELL_DEMOFAB"
) -> Type[Cell]:
    """Create an MPW cell for demofab.

    Args:
        die_width (float): nominal die width in [um].
        die_height (float): nominal die height in [um].
        cellname (str): name of the unit cell.

    Returns:
        nd.Cell: MPW template cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/cell_template",
            json={"die_width": die_width, "die_height": die_height, "cellname": cellname},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def d2s() -> Type[Cell]:
    """Create a Deep to Shallow waveguide transition

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/d2s", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def dbr(length: float = 100.0, pitch: float = 0.25, duty_cycle: float = 0.5) -> Type[Cell]:
    """Create a DBR cell.

    Args:
        length (float): length of DBR section in um
        pitch (float): pitch (full period) of dbr in um
        duty_cycle (float): duty cycle of grating (default = 0.5)

    Returns:
        Cell: dbr element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/dbr",
            json={"length": length, "pitch": pitch, "duty_cycle": duty_cycle},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def dbr_laser(
    Ldbr1: float = 50.0, Ldbr2: float = 500.0, Lsoa: float = 750.0, Lpm: float = 70.0
) -> Type[Cell]:
    """Create a parametrized dbr laser building block.

    Args:
        Ldbr1 (float): length of the front dbr in um.
        Ldbr2 (float): length of the back dbr in um.
        Lsoa (float): length of the SOA in um.
        Lpm (float): length of the phase modulator in um.

    Returns:
        Cell: DBR laser element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/dbr_laser",
            json={"Ldbr1": Ldbr1, "Ldbr2": Ldbr2, "Lsoa": Lsoa, "Lpm": Lpm},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def eopm_dc(length: float = 1000.0, pads: bool = False, sep: float = 10.0) -> Type[Cell]:
    """EOPM with pad option.

    Args:
        length (float): modulator length in um
        pads (bool): draw pads if True (default = False)
        sep (float): separation of pad bbox from eopm stub.

    Returns:
        Cell: eopm element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/eopm_dc",
            json={"length": length, "pads": pads, "sep": sep},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def io(
    shape: str = "tapered", width_out: float = 4.5, bend: bool = False, deep_input: bool = False
) -> Type[Cell]:
    """Create an IO cells that for edge coupling waveguide interfaces.

    Args:
        shape (str): shape of IO. values: None | 'simple' | 'tapered' | 'angled'
        width_out (float): Optional output width of the io in um.
        bend (bool): make the IO connection horizontal (True) for connecting to layout
        deep_input (bool): add a transition to a deeply-etched waveguides (default = False)

    Returns:
        Cell: io element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/io",
            json={"shape": shape, "width_out": width_out, "bend": bend, "deep_input": deep_input},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def isolation_act(length: float = 100.0) -> Type[Cell]:
    """Create a p-isolation cell in active.

    Args:
        length (float): length of the isolation section in um

    Returns:
        Cell: isolation element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/isolation_act", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def isolation_sh(length: float = 100.0) -> Type[Cell]:
    """Create a p-isolation cell in shallow.

    Args:
        length (float): length of the isolation section in um

    Returns:
        Cell: isolation element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/isolation_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def mmi1x1_sh() -> Type[Cell]:
    """Create a modefilter cell in shallow cross-section

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/mmi1x1_sh", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def mmi1x2_dp() -> Type[Cell]:
    """Create a 1x2 MMI cell in deep cross-section

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/mmi1x2_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def mmi1x2_sh() -> Type[Cell]:
    """Create a 1x2 MMI cell in shallow cross-section

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/mmi1x2_sh", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def mmi2x2_dp() -> Type[Cell]:
    """Create a 2x2 MMI cell in deep cross-section

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/mmi2x2_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def mmi2x2_sh() -> Type[Cell]:
    """Create a 2x2 MMI cell in shallow cross-section

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/mmi2x2_sh", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def mzi(length: float = 1000.0, sep: float = 50.0) -> Type[Cell]:
    """Creates a symmetric MZI with phase shifters in both arms

    Args:
        length (float): Length of the phase shifters
        sep (float): offset of the internal s-bends

    Returns:
        Cell: MZI element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/mzi", json={"length": length, "sep": sep}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def os_deep(width: float, radius: float) -> float:
    """Offset straight to bend for deep waveguides.

    Args:
        width (float): waveguide width
        radius (float): waveguide radius

    Returns:
        float: offset value
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/os_deep", json={"width": width, "radius": radius}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def os_shallow(width: float, radius: float) -> float:
    """Offset straight to bend for shallow waveguides.

    Args:
        width (float): waveguide width
        radius (float): waveguide radius

    Returns:
        float: offset value
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/os_shallow",
            json={"width": width, "radius": radius},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def pad_dc(length: float = 150.0, width: float = 150.0) -> Type[Cell]:
    """Create and return a DCpad cell.

    Args:
        length (float): pad length in um
        width (float): pad width in um

    Returns:
        Cell: pad element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/pad_dc", json={"length": length, "width": width}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def pad_rf(length: float = 80.0, width: float = 80.0) -> Type[Cell]:
    """Create a RFpad cell.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/pad_rf", json={"length": length, "width": width}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def pd() -> Type[Cell]:
    """Create a PhotoDetector Cell in deep cross-section.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/pd", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def pd_dc(pads: bool = False, sep: float = 0.0) -> Type[Cell]:
    """PhotoDiode with pad option.

    Args:
        pads (bool): draw pads if True (default = False)
        sep (float): separation of pad bbox from pin stub.

    Returns:
        Cell: PD element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/pd_dc", json={"pads": pads, "sep": sep}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def phase_shifter(length: float = 100.0) -> Type[Cell]:
    """Create a current injection phase shifting cell.

    Args:
        length (float): length of phase section in um

    Returns:
        Cell: phase-shifter element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/phase_shifter", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def s2a() -> Type[Cell]:
    """Create a Shallow to Active waveguide transition

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/s2a", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def s2d() -> Type[Cell]:
    """Create a Shallow to Deep waveguide transition

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/s2d", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def soa(length: float = 100.0, pad: bool = True) -> Type[Cell]:
    """Create a SOA cell.

    Args:
        length (float): length of gain section in um

    Returns:
        Cell: SOA element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/soa", json={"length": length, "pad": pad}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def soa_sh(length: float = 100.0) -> Type[Cell]:
    """Create a SOA cell with Shallow io.

    Args:
        length (float): length of gain section in um

    Returns:
        Cell: SOA element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/soa_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def _synchronize_tables() -> dict:
    """Return data without deserializing."""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/synchronize_tables", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return response.json()


def synchronize_tables() -> Type[Tables]:
    """Function to synchronize PDK tables to the api client.

    Returns:
        nd.Tables: PDK tables
    """
    return from_dict(_synchronize_tables())


@ndcache()
def unitcell(
    die_width: float = 5000, die_height: float = 5000, cellname: str = "UNIT_CELL_DEMOFAB"
) -> Type[Cell]:
    """Create a unitcell for demofab.

    Args:
        die_width (float): nominal die width in [um].
        die_height (float): nominal die height in [um].
        cellname (str): name of the unit cell.

    Returns:
        nd.Cell: unitcell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/unitcell",
            json={"die_width": die_width, "die_height": die_height, "cellname": cellname},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


synchronize_tables()


@ndcache()
def _get_deep():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/deep", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


deep = _get_deep()


@ndcache()
def _get_metaldc():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metaldc", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metaldc = _get_metaldc()


@ndcache()
def _get_metalrf():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metalrf", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metalrf = _get_metalrf()


@ndcache()
def _get_nazca_logo():
    """get attribute Cell"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/nazca_logo", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


nazca_logo = _get_nazca_logo()


@ndcache()
def _get_pinlines():
    """get attribute dict"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/pinlines", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


pinlines = _get_pinlines()


@ndcache()
def _get_shallow():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/shallow", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


shallow = _get_shallow()


@ndcache()
def _get_technology():
    """get attribute str"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/technology", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


technology = _get_technology()
if __name__ == "__main__":
    check_server_health()
