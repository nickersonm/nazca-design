# Do not edit this file
# Bright Photonics B.V. (c) 2024

import sys
import os
import httpx
import time
import base64
import json
from itertools import count
from typing import Any, Type, Union, List, Dict

from nazca.serializer import from_dict, to_dict
from nazca import Cell, Tables
from nazca import cellcache_util
from nazca.cellcache_util import ndcache
from nazca.interconnects import Interconnect
from nazca.util import load_nazca_cloud_connections, save_nazca_cloud_connections


credentials_path = os.path.expanduser(os.path.join("~", "nazca_cloud_credentials.json"))
server_configs = load_nazca_cloud_connections(credentials_path)
select = server_configs["select"]
connections = server_configs["connections"]
connection = connections[select]


cellcache_util.sqlite_flag = True
client = httpx.Client()
_ids = count(1)

base_url = ""
route = "/hhi"
headers = {}
timeout = 10
buffer_time = 60


def token_not_expired():
    """Check if the token is not expired."""
    global token, port
    if token != "":
        if port != "":  # local server
            return True
        header, payload, signature = token.split(".")
        payload += "=" * (-len(payload) % 4)  # padding
        decoded_payload = base64.urlsafe_b64decode(payload).decode("utf-8")
        payload_dict = json.loads(decoded_payload)
        current_time = time.time() + buffer_time
        if current_time > payload_dict.get("exp", 0):
            if not refresh_token():
                print("Token is expired. " f"Cannot connect to the Nazca server at {base_url}.")
            else:
                return True
    return False


def refresh_token():
    """Use refresh token to get a new access token."""
    global token
    try:
        response = httpx.post(
            f"https://cloud.nazca-design.org/authentication/refresh_token",
            json={"refresh_token": connection["refresh_token"]},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        message = response.json().get("message", False)
        if message:
            print(f"An HTTP error occurred: {message}")
            return False
        else:
            print(f"An HTTP error occurred: {err}")
            if hasattr(err, "response") and isinstance(err.response, httpx.Response):
                try:
                    error_message = err.response.json().get("error", "Unknown error")
                except ValueError:
                    error_message = "Unknown error"
            else:
                error_message = "Unknown error"
            print(f"Server error: {error_message}")
            raise ("Cannot refresh token.")
    except Exception as err:
        print(f"An error occurred: {err}")
        raise ("Cannot refresh token.")
    json_response = response.json()
    # json_response = {"refresh_token": "1234", "token": "ABCD"}
    token = f"Bearer {json_response.get('token', '')}"
    headers["Authorization"] = token
    refresh_token = json_response.get("refresh_token", "")
    connection["refresh_token"] = refresh_token
    connection["headers"] = headers
    server_configs["connections"][select] = connection
    save_nazca_cloud_connections(filename=credentials_path, server_configs=server_configs)
    return True


def check_server_health():
    """Check if the server is healthy and running, as well if the token is valid."""
    token_not_expired()
    try:
        response = httpx.get(f"{base_url}/health", headers=headers)
        response.raise_for_status()  # Raises an HTTPError if the status is 4xx, 5xx
    except httpx.HTTPStatusError as exc:
        if exc.response.status_code == 403:
            raise PermissionError(
                f"Access forbidden to the Nazca hhi PDK server at {base_url}. Please check your permissions."
            ) from None
        else:
            raise ConnectionError(
                f"HTTP error occurred while connecting to the Nazca PDK server at {base_url}: {exc}"
            ) from None
    except httpx.RequestError as exc:
        raise ConnectionError(
            f"Cannot connect to the Nazca PDK server at {base_url}. Please check if the server is running."
        )
    print(f"Nazca {route[1:]} PDK server healthy at {base_url}.")
    return


def set_server(target: str):
    global base_url, headers, token, port
    conn = connection
    base_url = conn["base_url"]
    headers = conn["headers"]
    token = headers.get("Authorization", "")
    if token != "":
        token.replace("Bearer ", "")
    port = conn.get("port", "")
    if port != "":
        base_url = f"{base_url}:{port}"
    base_url = f"{base_url}{route}"
    try:
        check_server_health()
    except (PermissionError, ConnectionError) as e:
        print(e)
        sys.exit(1)


set_server(connection)


@ndcache()
def HHI_BJsingle() -> Type[Cell]:
    """Single butt-joint from an E1700 to an active waveguide.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_bjsingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_BJtwin() -> Type[Cell]:
    """Twin butt-joint from an E1700 to an active waveguide.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_bjtwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_BPD() -> Type[Cell]:
    """Balanced Photo Diode

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_bpd", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_DBR(
    L_FR: float = 200.0,
    L_IF: float = 40.0,
    L_IM: float = 40.0,
    L_IR: float = 40.0,
    L_PS: float = 50.0,
    L_RR: float = 50.0,
    L_SOA: float = 400.0,
    WL_FR: float = 1550.0,
    WL_RR: float = 1550.0,
) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating laser based on MQWs, connecting to E1700 waveguides.

    Args:
        L_FR (float): length of front reflector Range in um [20.0 < 200.0 < 800.0]
        L_IF (float): length of front isolation section Range in um [10.0 < 40.0 < 800.0]
        L_IM (float): length of middle isolation section Range in um [10.0 < 40.0 < 800.0]
        L_IR (float): length of rear isolation section Range in um [10.0 < 40.0 < 800.0]
        L_PS (float): length of phase section Range in um [20.0 < 50.0 < 4000.0]
        L_RR (float): length of rear reflector Range in um [20.0 < 50.0 < 800.0]
        L_SOA (float): length of SOA section Range in um [20.0 < 400.0 < 2000.0]
        WL_FR (float): wavelength of front reflector Range in nm [1500.0 < 1550.0 < 1580.0]
        WL_RR (float): wavelength of rear reflector Range in nm [1500.0 < 1550.0 < 1580.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_dbr",
            json={
                "L_FR": L_FR,
                "L_IF": L_IF,
                "L_IM": L_IM,
                "L_IR": L_IR,
                "L_PS": L_PS,
                "L_RR": L_RR,
                "L_SOA": L_SOA,
                "WL_FR": WL_FR,
                "WL_RR": WL_RR,
            },
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_DBRsection(
    L_FR: float = 200.0,
    L_IF: float = 40.0,
    L_IM: float = 40.0,
    L_IR: float = 40.0,
    L_PS: float = 50.0,
    L_RR: float = 50.0,
    L_SOA: float = 400.0,
    WL_FR: float = 1550.0,
    WL_RR: float = 1550.0,
) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating laser section based on MQWs, connecting to active waveguides.

    Args:
        L_FR (float): length of front reflector Range in um [20.0 < 200.0 < 800.0]
        L_IF (float): length of front isolation section Range in um [10.0 < 40.0 < 800.0]
        L_IM (float): length of middle isolation section Range in um [10.0 < 40.0 < 800.0]
        L_IR (float): length of rear isolation section Range in um [10.0 < 40.0 < 800.0]
        L_PS (float): length of phase section Range in um [20.0 < 50.0 < 4000.0]
        L_RR (float): length of rear reflector Range in um [20.0 < 50.0 < 800.0]
        L_SOA (float): length of SOA section Range in um [20.0 < 400.0 < 2000.0]
        WL_FR (float): wavelength of front reflector Range in nm [1500.0 < 1550.0 < 1580.0]
        WL_RR (float): wavelength of rear reflector Range in nm [1500.0 < 1550.0 < 1580.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_dbrsection",
            json={
                "L_FR": L_FR,
                "L_IF": L_IF,
                "L_IM": L_IM,
                "L_IR": L_IR,
                "L_PS": L_PS,
                "L_RR": L_RR,
                "L_SOA": L_SOA,
                "WL_FR": WL_FR,
                "WL_RR": WL_RR,
            },
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_DFB(WL_L: float = 1550.0) -> Type[Cell]:
    """Distributed feedback (DFB) grating laser with RF modulation and thermal tuning, connecting to E1700 waveguides.

    Args:
        WL_L (float): wavelength of laser Range in nm [1500.0 < 1550.0 < 1580.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(f"{base_url}/hhi_dfb", json={"WL_L": WL_L}, headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_DFBsection(WL_L: float = 1550.0) -> Type[Cell]:
    """Distributed feedback (DFB) grating laser with RF modulation and thermal tuning, connecting to active waveguides.

    Args:
        WL_L (float): wavelength of laser Range in nm [1500.0 < 1550.0 < 1580.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_dfbsection", json={"WL_L": WL_L}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_DirCoupE1700(L_C: float = 100.0) -> Type[Cell]:
    """2x2 Directional coupler connection to E1700 waveguides.

    Args:
        L_C (float): length of coupling Range in um [0.0 < 100.0 < 2000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_dircoupe1700", json={"L_C": L_C}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_DirCoupE600(L_C: float = 100.0) -> Type[Cell]:
    """2x2 Directional coupler connection to E600 waveguides.

    Args:
        L_C (float): length of coupling Range in um [0.0 < 100.0 < 2000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_dircoupe600", json={"L_C": L_C}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EAM(L_E: float = 100.0) -> Type[Cell]:
    """Electro-absorbtion modulator (EAM) connecting to E1700 waveguides.

    Args:
        L_E (float): length of EAM Range in um [60.0 < 100.0 < 1000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(f"{base_url}/hhi_eam", json={"L_E": L_E}, headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EAMsection(L_E: float = 100.0) -> Type[Cell]:
    """Electro-absorbtion modulator (EAM) section connecting to active waveguides.

    Args:
        L_E (float): length of EAM Range in um [60.0 < 100.0 < 1000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_eamsection", json={"L_E": L_E}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EOBiasSection(L_B: float = 500.0) -> Type[Cell]:
    """P-Contact Bias Pads for the upper- and lower- waveguide.

    Args:
        L_B (float): length of PMEO Range in um [50.0 < 500.0 < 800.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_eobiassection", json={"L_B": L_B}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EOBiasTwinSection(L_B: float = 500.0) -> Type[Cell]:
    """ActiveRF waveguide and containing the P-Contact Bias Pads.

    Args:
        L_B (float): length of the Bias Pads section Range in um [60.0 < 500.0 < 6000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_eobiastwinsection", json={"L_B": L_B}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EOElectricalGND() -> Type[Cell]:
    """ActiveRF waveguide and containing the N Contact Pad of the subsequent- or previous MZM and PMEO modulator.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_eoelectricalgnd", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EOPMTWSectionSingle(N: int = 4.0) -> Type[Cell]:
    """Electro Optic phase modulator connecting to only one active waveguide.

    Args:
        N (int): Number of 250um sections Range in null [1.0 < 4.0 < 50.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_eopmtwsectionsingle", json={"N": N}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EOPMTWSectionTwin(N: int = 4.0) -> Type[Cell]:
    """Electro Optic phase modulator connecting to two active waveguides.

    Args:
        N (int): Number of 250um sections Range in null [1.0 < 4.0 < 50.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_eopmtwsectiontwin", json={"N": N}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_EOPMTermination() -> Type[Cell]:
    """GS RF 50 Ohm Termination.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_eopmtermination", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_FacetWGE1700(R: float = 0.0001, n: float = 1.0) -> Type[Cell]:
    """Facet end and WG protection to E1700 waveguides. Placement can be under an angle for lowering reflections.

    Args:
        R (float): Reflectance Range in  [0.0001 < 0.0001 < 1.0]
        n (float): Refraction Range in  [1.0 < 1.0 < 10.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_facetwge1700", json={"R": R, "n": n}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_FacetWGE1700twin(R: float = 0.0001, n: float = 1.0) -> Type[Cell]:
    """Facet end and WG protection to twin E1700 waveguides. Placement can be under an angle for lowering reflections.

    Args:
        R (float): Reflectance Range in  [0.0001 < 0.0001 < 1.0]
        n (float): Refraction Range in  [1.0 < 1.0 < 10.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_facetwge1700twin", json={"R": R, "n": n}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_FacetWGE200(R: float = 0.0001, n: float = 1.0) -> Type[Cell]:
    """Facet end and WG protection to E200 waveguides. Placement can be under an angle for lowering reflections.

    Args:
        R (float): Reflectance Range in  [0.0001 < 0.0001 < 1.0]
        n (float): Refraction Range in  [1.0 < 1.0 < 10.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_facetwge200", json={"R": R, "n": n}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_FacetWGE600(R: float = 0.0001, n: float = 1.0) -> Type[Cell]:
    """Facet end and WG protection to E600 waveguides. Placement can be under an angle for lowering reflections.

    Args:
        R (float): Reflectance Range in  [0.0001 < 0.0001 < 1.0]
        n (float): Refraction Range in  [1.0 < 1.0 < 10.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_facetwge600", json={"R": R, "n": n}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_GRAT(L_G: float = 100.0, WL_G: float = 1550.0) -> Type[Cell]:
    """Tunable distributed Bragg reflector (DBR) grating connecting to E1700 waveguides.

    Args:
        L_G (float): length of grating Range in um [20.0 < 100.0 < 800.0]
        WL_G (float): wavelength for grating Range in nm [1500.0 < 1550.0 < 1580.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_grat", json={"L_G": L_G, "WL_G": WL_G}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_GRATsection(L_G: float = 100.0, WL_G: float = 1550.0) -> Type[Cell]:
    """Tunable distributed Bragg reflector (DBR) grating connecting to active waveguides.

    Args:
        L_G (float): length of grating Range in um [24.0 < 100.0 < 800.0]
        WL_G (float): wavelength for grating Range in nm [1500.0 < 1550.0 < 1580.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_gratsection", json={"L_G": L_G, "WL_G": WL_G}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_GSGtoGS() -> Type[Cell]:
    """GSG to GS transition

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_gsgtogs", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_ID() -> Type[Cell]:
    """Cell for die identifier.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_id", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_ISOsectionSingle(L_I: float = 100.0) -> Type[Cell]:
    """Single P-side isolation section (resistance) for in between two optical-active waveguide sections.

    Args:
        L_I (float): length of isolation Range in um [10.0 < 100.0 < 6000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_isosectionsingle", json={"L_I": L_I}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_ISOsectionTwin(L_I: float = 100.0) -> Type[Cell]:
    """Twin P-side isolation section (resistance) for in between two optical-active waveguide sections.

    Args:
        L_I (float): length of isolation Range in um [10.0 < 100.0 < 6000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_isosectiontwin", json={"L_I": L_I}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_METMETx() -> Type[Cell]:
    """Crossing between DC-line and another DC-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_metmetx", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MIR1E1700() -> Type[Cell]:
    """Single port Multi-mode interference reflector (MIR) in E1700. Component for broadband power refection.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mir1e1700", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MIR2E1700() -> Type[Cell]:
    """Dual port Multi-mode interference reflector (MIR) in E1700. Component for broadband power refection and splitting.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mir2e1700", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MMI1x2ACT() -> Type[Cell]:
    """1x2 Multi-mode interference (MMI) coupler in optical-active waveguide. Component for power splitting and combining.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mmi1x2act", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MMI1x2E1700() -> Type[Cell]:
    """1x2 Multi-mode interference (MMI) coupler in E1700. Component for power splitting and combining.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mmi1x2e1700", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MMI1x2E600() -> Type[Cell]:
    """1x2 Multi-mode interference (MMI) coupler in E600. Component for power splitting and combining.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mmi1x2e600", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MMI2x2ACT() -> Type[Cell]:
    """2x2 Multi-mode interference (MMI) coupler in optical-active waveguide. Component for power splitting and combining.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mmi2x2act", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MMI2x2E1700() -> Type[Cell]:
    """2x2 Multi-mode interference (MMI) coupler in E1700. Component for power splitting and combining.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mmi2x2e1700", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MMI2x2E600() -> Type[Cell]:
    """2x2 Multi-mode interference (MMI) coupler in E600. Component for power splitting and combining.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mmi2x2e600", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MZIswitch() -> Type[Cell]:
    """Thermal-optical Mach-Zehnder modulator.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_mziswitch", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MZMDD(N: int = 16.0) -> Type[Cell]:
    """Push-Pull Mach-Zehnder Modulator with GS track connecting to E1700 waveguides and where the RF-input and RF-output are both directed downward.

    Args:
        N (int): Number of 250um sections Range in null [1.0 < 16.0 < 50.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(f"{base_url}/hhi_mzmdd", json={"N": N}, headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_MZMDU(N: int = 16.0) -> Type[Cell]:
    """Push-Pull Mach-Zehnder Modulator with GS track connecting to E1700 waveguides and where the RF-input and RF-output are directed towards opposite direction.

    Args:
        N (int): Number of 250um sections Range in null [1.0 < 16.0 < 50.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(f"{base_url}/hhi_mzmdu", json={"N": N}, headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PDDC() -> Type[Cell]:
    """DC photo-diode.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_pddc", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PDRFsingle() -> Type[Cell]:
    """RF photo-diode.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_pdrfsingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PDRFtwin() -> Type[Cell]:
    """Twin RF photo-diode.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_pdrftwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PMTOE1700(L_P: float = 100.0) -> Type[Cell]:
    """Thermal-optical phase modulator in E1700.

    Args:
        L_P (float): length of phase shifter Range in um [10.0 < 100.0 < 6000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_pmtoe1700", json={"L_P": L_P}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PMTOE200(L_P: float = 100.0) -> Type[Cell]:
    """Thermal-optical phase modulator in E200.

    Args:
        L_P (float): length of phase shifter Range in um [10.0 < 100.0 < 6000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_pmtoe200", json={"L_P": L_P}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PMTOE600(L_P: float = 100.0) -> Type[Cell]:
    """Thermal-optical phase modulator in E600.

    Args:
        L_P (float): length of phase shifter Range in um [10.0 < 100.0 < 6000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_pmtoe600", json={"L_P": L_P}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PolConverter45() -> Type[Cell]:
    """Polarization converter for 45 degrees.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_polconverter45", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PolConverter90() -> Type[Cell]:
    """Polarization converter for 90 degrees.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_polconverter90", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_PolSplitter() -> Type[Cell]:
    """Polarization splitter.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_polsplitter", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_R50GSG() -> Type[Cell]:
    """50 ohm resistor between GSG tracks.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_r50gsg", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_SGDBRTO(N_B: int = 10.0, W_S: float = 1550.0, Z_0: float = 50.0, Z_1: float = 25.0) -> Type[Cell]:
    """Thermal-optical sampled grating (max. grating length Z0*(NB-1)+Z1 = 800um)

    Args:
        N_B (int): Number of Bursts Range in int [2.0 < 10.0 < 32.0]
        W_S (float): Wavelength Range in nm [1500.0 < 1550.0 < 1580.0]
        Z_0 (float): Burst length Range in um [25.0 < 50.0 < 400.0]
        Z_1 (float): Gratings length Range in um [1.52 < 25.0 < 400.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_sgdbrto",
            json={"N_B": N_B, "W_S": W_S, "Z_0": Z_0, "Z_1": Z_1},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_SOA(L_S: float = 100.0) -> Type[Cell]:
    """Optical gain section with butt joints connecting to E1700 waveguides.

    Args:
        L_S (float): length of SOA Range in um [20.0 < 100.0 < 4000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(f"{base_url}/hhi_soa", json={"L_S": L_S}, headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_SOAsection(L_S: float = 100.0) -> Type[Cell]:
    """Optical gain section connecting to active waveguides.

    Args:
        L_S (float): length of SOA Range in um [24.0 < 100.0 < 4000.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_soasection", json={"L_S": L_S}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_SSCLATE1700(R: float = 0.0001, n: float = 1.0) -> Type[Cell]:
    """Spot-size converter (SSC) to 10 um connecting to E1700 waveguides. Placement can be under an angle for lowering reflections.

    Args:
        R (float): Reflection Range in  [0.0001 < 0.0001 < 1.0]
        n (float): Refraction Range in  [1.0 < 1.0 < 10.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_ssclate1700", json={"R": R, "n": n}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_SSCLATE200(R: float = 0.0001, n: float = 1.0) -> Type[Cell]:
    """Spot-size converter (SSC) to 10 um connecting to E200 waveguides. Placement can be under an angle for lowering reflections.

    Args:
        R (float): Reflection Range in  [0.0001 < 0.0001 < 1.0]
        n (float): Refraction Range in  [1.0 < 1.0 < 10.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_ssclate200", json={"R": R, "n": n}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_TOBiasSection(L: float = 100.0) -> Type[Cell]:
    """Thermal-optical phase modulator on active waveguide.

    Args:
        L (float): Heater length Range in um [20.0 < 100.0 < 800.0]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hhi_tobiassection", json={"L": L}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_TWEendSingle() -> Type[Cell]:
    """One active waveguide GS termination-bend.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_tweendsingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_TWEendSingleOpposite() -> Type[Cell]:
    """One active waveguide GS termination-bend for opposite placement

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_tweendsingleopposite", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_TWEendTwin() -> Type[Cell]:
    """Two active waveguides GS termination-bend.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_tweendtwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_TWEendTwinOpposite() -> Type[Cell]:
    """Two active waveguides GS termination-bend for opposite placement

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_tweendtwinopposite", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxACTGSGsingle() -> Type[Cell]:
    """Crossing between an active waveguide and a Ground Signal RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxactgsgsingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxACTGSGtwin() -> Type[Cell]:
    """Crossing between an twin active waveguide and a Ground Signal RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxactgsgtwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxACTGSsingle() -> Type[Cell]:
    """Crossing between an active waveguide and a GSG RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxactgssingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxACTGStwin() -> Type[Cell]:
    """Crossing between an twin active waveguide and a GSG RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxactgstwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxACTsingle() -> Type[Cell]:
    """Crossing between an active waveguide and a DC-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxactsingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxACTtwin() -> Type[Cell]:
    """Crossing between an twin active waveguide and a DC-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxacttwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE1700GSGsingle() -> Type[Cell]:
    """Crossing between an E1700 waveguide and a GSG RF-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe1700gsgsingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE1700GSGtwin() -> Type[Cell]:
    """Crossing between twin E1700 waveguide and a GSG RF-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe1700gsgtwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE1700GSsingle() -> Type[Cell]:
    """Crossing between an E1700 waveguide and a Ground Signal RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe1700gssingle", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE1700GStwin() -> Type[Cell]:
    """Crossing between twin E1700 waveguide and a Ground Signal RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe1700gstwin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE1700single() -> Type[Cell]:
    """Crossing between an E1700 waveguide and a DC-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe1700single", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE1700twin() -> Type[Cell]:
    """Crossing between twin E1700 waveguide and a DC-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe1700twin", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE200() -> Type[Cell]:
    """Crossing between an E200 waveguide and a DC-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe200", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE200GS() -> Type[Cell]:
    """Crossing between an E200 waveguide and a Ground Signal RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe200gs", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE200GSG() -> Type[Cell]:
    """Crossing between an E200 waveguide and a GSG RF-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe200gsg", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE600() -> Type[Cell]:
    """Crossing between an E600 waveguide and a DC-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe600", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE600GS() -> Type[Cell]:
    """Crossing between an E600 waveguide and a Ground Signal RF track.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe600gs", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGMETxE600GSG() -> Type[Cell]:
    """Crossing between an E600 waveguide and a GSG RF-line.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgmetxe600gsg", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGTE200E1700() -> Type[Cell]:
    """Transition element from an E200 to an E1700 waveguide.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgte200e1700", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGTE200E600() -> Type[Cell]:
    """Transition element from an E200 to an E600 waveguide.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgte200e600", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HHI_WGTE600E1700() -> Type[Cell]:
    """Transition element from an E600 to an E1700 waveguide.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/hhi_wgte600e1700", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HH_001_003_SBOte_E1700(width: float, radius: float, wl: float = 1.55) -> float:
    """Calculate the straight-to-bend waveguide offset for TE in E1700.

    Args:
        width (float): waveguide width in um.
        radius (float): radius in um at the waveguide center.
        wl (float): wavelength of the light in um.

    Returns:
       float: offset
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hh_001_003_sbote_e1700",
            json={"width": width, "radius": radius, "wl": wl},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HH_001_003_SBOte_E600(width: float, radius: float, wl: float = 1.55) -> float:
    """Calculate the straight-to-bend waveguide offset for TE in E600.

    Args:
        width (float): waveguide width in um.
        radius (float): radius in um at the waveguide center.
        wl (float): wavelength of the light in um.

    Returns:
        float: offset
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hh_001_003_sbote_e600",
            json={"width": width, "radius": radius, "wl": wl},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HH_001_003_SBOtm_E1700(width: float, radius: float, wl: float = 1.55) -> float:
    """Calculate the straight-to-bend waveguide offset for TM in E1700.

    Args:
        width (float): waveguide width in um.
        radius (float): radius in um at the waveguide center.
        wl (float): wavelength of the light in um.

    Returns:
       float: offset
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hh_001_003_sbotm_e1700",
            json={"width": width, "radius": radius, "wl": wl},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def HH_001_003_SBOtm_E600(width: float, radius: float, wl: float = 1.55) -> float:
    """Calculate the straight-to-bend waveguide offset for TM in E600.

    Args:
        width (float): waveguide width in um.
        radius (float): radius in um at the waveguide center.
        wl (float): wavelength of the light in um.

    Returns:
        float: offset
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/hh_001_003_sbotm_e600",
            json={"width": width, "radius": radius, "wl": wl},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def apply_cleavemarks(cell: Type[Cell]) -> Type[Cell]:
    """Add cleave marks to fit the unitcell.

    Args:
        cell (Cell): unitcell to fit the cleave marks to.

    Returns:
        Cell: cell with cleave marks aligened with the unitcell.
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/apply_cleavemarks",
            json={"cell": to_dict(data=cell)},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def apply_coating(cell: Type[Cell], west_coating: str, east_coating: str) -> Type[Cell]:
    """None"""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/apply_coating",
            json={"cell": to_dict(data=cell), "west_coating": west_coating, "east_coating": east_coating},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_EOPM_MZM_RF(N: int = 20) -> Type[Cell]:
    """Electic-optic phase modulator connecting to E1700 and MetalGS.

    Composited of HHI basic elements.

    Args:
        N (int): number of 250 um long modulator sections

    Returns:
        Cell: MZM-PMEO-RF
    """
    token_not_expired()
    try:
        response = client.post(f"{base_url}/bp_eopm_mzm_rf", json={"N": N}, headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_gs_pad(length: float = 75) -> Type[Cell]:
    """Function to generate a ground-signal pad.

    Args:
        length (float): Length of the pad in um.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/bp_gs_pad", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_gsg_pad(length: float = 75) -> Type[Cell]:
    """Function to generate a ground-signal-ground pad.

    Args:
        length (float): Length of the pad in um.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/bp_gsg_pad", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_pad_dc(length: float = 100, width: float = 100) -> Type[Cell]:
    """None"""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/bp_pad_dc", json={"length": length, "width": width}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def cell_template(
    die_width: float = 8000, die_height: float = 4000, cellname: str = "MPW_CELL_HHI"
) -> Type[Cell]:
    """None"""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/cell_template",
            json={"die_width": die_width, "die_height": die_height, "cellname": cellname},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def export_gds(
    topcells: Type[Cell] = None,
    filename: str = "",
    flat: bool = False,
    clear: bool = False,
    bb: bool = False,
    uPDK: bool = False,
    md5: bool = False,
    submit: bool = False,
    bbpath: str = "",
    hhi_only: bool = True,
    angleDRC: bool = True,
) -> None:
    """Export layout to gds file for all cells in <topcells>. Exports a layout using only HHI layers when hhi_only is
    set to True.

    Args:
        topcells (Cell | list of Cells): Cell(s) to export
            (default = None, which exports the 'nazca' default gds cell)
        filename (str): gds output filename (default = 'nazca_export.gds')
            The filename may include a path, in which case
            case the path becomes the base directory. Missing directories
            will be created.
        flat (bool): export flat gds, i.e. no hierarchy (default = False)
        clear (bool): clear mask layout between consecutive exports (default = True)
        bb (bool): Export design as a building block (default = False)'
        submit (bool): create a complete fileset for foundry submission (default=False)
        md5 (bool): create md5sum (default=False)
        bbpath (str): path to use to load a gds for bb=True generated modules (default="")
        hhi_only (bool): export layout to gds file using only hhi layers (default=True)
        kwargs (dict): additional arguments to pass to the export function as a dictionary

    Returns:
        None
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/export_gds",
            json={
                "topcells": to_dict(data=topcells),
                "filename": filename,
                "flat": flat,
                "clear": clear,
                "bb": bb,
                "uPDK": uPDK,
                "md5": md5,
                "submit": submit,
                "bbpath": bbpath,
                "hhi_only": hhi_only,
                "angleDRC": angleDRC,
            },
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def _synchronize_tables() -> dict:
    """Return data without deserializing."""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/synchronize_tables", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return response.json()


def synchronize_tables() -> Type[Tables]:
    """Function to synchronize PDK tables to the api client.

    Returns:
        nd.Tables: PDK tables
    """
    return from_dict(_synchronize_tables())


@ndcache()
def unitcell(
    die_width: float = 8000, die_height: float = 4000, cellname: str = "UNIT_CELL_HHI"
) -> Type[Cell]:
    """Create a unitcell for HHI."""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/unitcell",
            json={"die_width": die_width, "die_height": die_height, "cellname": cellname},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


synchronize_tables()


@ndcache()
def _get_e1700():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/e1700", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


e1700 = _get_e1700()


@ndcache()
def _get_e200():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/e200", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


e200 = _get_e200()


@ndcache()
def _get_e600():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/e600", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


e600 = _get_e600()


@ndcache()
def _get_metaldc():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metaldc", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metaldc = _get_metaldc()


@ndcache()
def _get_metalgs():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metalgs", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metalgs = _get_metalgs()


@ndcache()
def _get_metalgsg():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metalgsg", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metalgsg = _get_metalgsg()


@ndcache()
def _get_nazca_logo():
    """get attribute Cell"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/nazca_logo", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


nazca_logo = _get_nazca_logo()


@ndcache()
def _get_pinlines():
    """get attribute dict"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/pinlines", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


pinlines = _get_pinlines()


@ndcache()
def _get_technology():
    """get attribute str"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/technology", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


technology = _get_technology()
if __name__ == "__main__":
    check_server_health()
