# Do not edit this file
# Bright Photonics B.V. (c) 2024

import sys
import os
import httpx
import time
import base64
import json
from itertools import count
from typing import Any, Type, Union, List, Dict

from nazca.serializer import from_dict, to_dict
from nazca import Cell, Tables
from nazca import cellcache_util
from nazca.cellcache_util import ndcache
from nazca.interconnects import Interconnect
from nazca.util import load_nazca_cloud_connections, save_nazca_cloud_connections


credentials_path = os.path.expanduser(os.path.join("~", "nazca_cloud_credentials.json"))
server_configs = load_nazca_cloud_connections(credentials_path)
select = server_configs["select"]
connections = server_configs["connections"]
connection = connections[select]


cellcache_util.sqlite_flag = True
client = httpx.Client()
_ids = count(1)

base_url = ""
route = "/smart_hs28pc"
headers = {}
timeout = 10
buffer_time = 60


def token_not_expired():
    """Check if the token is not expired."""
    global token, port
    if token != "":
        if port != "":  # local server
            return True
        header, payload, signature = token.split(".")
        payload += "=" * (-len(payload) % 4)  # padding
        decoded_payload = base64.urlsafe_b64decode(payload).decode("utf-8")
        payload_dict = json.loads(decoded_payload)
        current_time = time.time() + buffer_time
        if current_time > payload_dict.get("exp", 0):
            if not refresh_token():
                print("Token is expired. " f"Cannot connect to the Nazca server at {base_url}.")
            else:
                return True
    return False


def refresh_token():
    """Use refresh token to get a new access token."""
    global token
    try:
        response = httpx.post(
            f"https://cloud.nazca-design.org/authentication/refresh_token",
            json={"refresh_token": connection["refresh_token"]},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        message = response.json().get("message", False)
        if message:
            print(f"An HTTP error occurred: {message}")
            return False
        else:
            print(f"An HTTP error occurred: {err}")
            if hasattr(err, "response") and isinstance(err.response, httpx.Response):
                try:
                    error_message = err.response.json().get("error", "Unknown error")
                except ValueError:
                    error_message = "Unknown error"
            else:
                error_message = "Unknown error"
            print(f"Server error: {error_message}")
            raise ("Cannot refresh token.")
    except Exception as err:
        print(f"An error occurred: {err}")
        raise ("Cannot refresh token.")
    json_response = response.json()
    # json_response = {"refresh_token": "1234", "token": "ABCD"}
    token = f"Bearer {json_response.get('token', '')}"
    headers["Authorization"] = token
    refresh_token = json_response.get("refresh_token", "")
    connection["refresh_token"] = refresh_token
    connection["headers"] = headers
    server_configs["connections"][select] = connection
    save_nazca_cloud_connections(filename=credentials_path, server_configs=server_configs)
    return True


def check_server_health():
    """Check if the server is healthy and running, as well if the token is valid."""
    token_not_expired()
    try:
        response = httpx.get(f"{base_url}/health", headers=headers)
        response.raise_for_status()  # Raises an HTTPError if the status is 4xx, 5xx
    except httpx.HTTPStatusError as exc:
        if exc.response.status_code == 403:
            raise PermissionError(
                f"Access forbidden to the Nazca smart_hs28pc PDK server at {base_url}. Please check your permissions."
            ) from None
        else:
            raise ConnectionError(
                f"HTTP error occurred while connecting to the Nazca PDK server at {base_url}: {exc}"
            ) from None
    except httpx.RequestError as exc:
        raise ConnectionError(
            f"Cannot connect to the Nazca PDK server at {base_url}. Please check if the server is running."
        )
    print(f"Nazca {route[1:]} PDK server healthy at {base_url}.")
    return


def set_server(target: str):
    global base_url, headers, token, port
    conn = connection
    base_url = conn["base_url"]
    headers = conn["headers"]
    token = headers.get("Authorization", "")
    if token != "":
        token.replace("Bearer ", "")
    port = conn.get("port", "")
    if port != "":
        base_url = f"{base_url}:{port}"
    base_url = f"{base_url}{route}"
    try:
        check_server_health()
    except (PermissionError, ConnectionError) as e:
        print(e)
        sys.exit(1)


set_server(connection)


@ndcache()
def apply_coating(cell: Type[Cell], west_coating: str, east_coating: str) -> Type[Cell]:
    """None"""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/apply_coating",
            json={"cell": to_dict(data=cell), "west_coating": west_coating, "east_coating": east_coating},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_dbr_dp(length: float = 500, wavelength: float = 1550) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Deep waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        wavelength (float): the wavelength of the DBR Range in um [1505 < 1550 < 1595]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/bp_dbr_dp",
            json={"length": length, "wavelength": wavelength},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_dbr_dp_ncontact(length: float = 500, wavelength: float = 1550) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Deep waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        wavelength (float): the wavelength of the DBR Range in um [1505 < 1550 < 1595]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/bp_dbr_dp_ncontact",
            json={"length": length, "wavelength": wavelength},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_dbr_sh(length: float = 500, wavelength: float = 1550) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Shallow waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        wavelength (float): the wavelength of the DBR Range in um [1505 < 1550 < 1595]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/bp_dbr_sh",
            json={"length": length, "wavelength": wavelength},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def bp_dbr_sh_ncontact(length: float = 500, wavelength: float = 1550) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Shallow waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        wavelength (float): the wavelength of the DBR Range in um [1505 < 1550 < 1595]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/bp_dbr_sh_ncontact",
            json={"length": length, "wavelength": wavelength},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def cell_template(
    die_width: float = 4600, die_height: float = 4000, cellname: str = "MPW_CELL_SMART"
) -> Cell:
    """Create a cell template for the SMART MPW."""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/cell_template",
            json={"die_width": die_width, "die_height": die_height, "cellname": cellname},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def gsg_tapered_pad(instantiate: bool = True) -> Type[Cell]:
    """Composite GSG pad with taper.

    Returns:
        Cell: taper GSG pad element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/gsg_tapered_pad", json={"instantiate": instantiate}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def io(
    pin: Any = None,
    bend: bool = False,
    bendgrid: bool = False,
    wa: float = 3.5,
    ws: float = 2.0,
    angle: float = 0,
) -> Type[Cell]:
    """io block for connecting waveguides to the chip's facet.

    Even pin numbers are automatically perpendicular to the facet,
    odd numbers at 7 degrees. The current pin will be set at <pin>.

    Args:
        pin (Node): pin to connect standard io to. Standard pin is required.
        bend (bool): flag for angled IO which adds a bend, if needed, to end in a horizontal position.
        bendgrid (bool): as the bend option, but end on a 12.5 um grid for easy align
               of two opposit IOs.
        wa (float): width of angled io at facet (default = 3.5)
        angle (float): angle of the input pin, which will be automatically extracted from 'pin'.
            The 'pin' setting is overruled if an angle is provided explicity. If no 'pin'
            is provided angle defaults to 0.

    Returns:
        Cell: cell with io waveguide structure

    Example:
        Place optical io's in the mask::

            import nazca as nd
            import smart_hs28pc as sp

            project = sp.DesignArea() # project template with io pins
            die = project.cell().put()

            sp.io(die.pin['ioW100'], bend=True).put()
            sp.io(die.pin['ioE101']).put()

            nd.export_plt()
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/io",
            json={"pin": pin, "bend": bend, "bendgrid": bendgrid, "wa": wa, "ws": ws, "angle": angle},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def nazca_logo(scale: float = 1, cellname: str = "sp.nazca_logo", bbox: bool = True) -> Type[Cell]:
    """Nazca logo adapted to the Smart Photonics technology.

    Args:
        scale (float): scaling factor of the cell (default = 1)
        cellname (str): output cell_name (default = 'sp.nazca_logo')
        bbox (bool): Option to add bbox pins to the Nazca logo (default = True)

    Returns:
        Cell: Nazca logo
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/nazca_logo",
            json={"scale": scale, "cellname": cellname, "bbox": bbox},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def niso_enclosed_wg_dp(
    width_niso: float = 20.0, width_wg: float = 1.5, distance_niso_wg: float = 5.0
) -> Type[Cell]:
    """Deep waveguide enclosed by N-isolation sections for connections to isolated blocks.

    Args:
        width_niso (float): width of Nisolation in um.
        width_wg (float): width of the Deep waveguide in um.
        distance_niso_wg (float): distance between the waveguide edge and Nisolation in um.

    Returns:
        Cell: Deep waveguide enclosed by N-isolation.
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/niso_enclosed_wg_dp",
            json={"width_niso": width_niso, "width_wg": width_wg, "distance_niso_wg": distance_niso_wg},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def niso_enclosed_wg_sh(
    width_niso: float = 20.0, width_wg: float = 2.0, distance_niso_wg: float = 10.0
) -> Type[Cell]:
    """Shallow waveguide enclosed by N-isolation sections for connections to isolated blocks.

    Args:
        width_niso (float): width of Nisolation in um.
        width_wg (float): width of the Shallow waveguide in um.
        distance_niso_wg (float): distance between the waveguide edge and Nisolation in um.

    Returns:
        Cell: Shallow waveguide enclosed by N-isolation.
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/niso_enclosed_wg_sh",
            json={"width_niso": width_niso, "width_wg": width_wg, "distance_niso_wg": distance_niso_wg},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def niso_termination(width: float = 20.0) -> Type[Cell]:
    """N-isolation termination section for interconnects.

    Args:
        width (float): width of isolation in um.

    Returns:
        Cell: N-isolation termination section.
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/niso_termination", json={"width": width}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sboffset_deep(width: float, radius: float = 0.0, wl: float = 1.55, pol: str = "TE") -> float:
    """Straight-bend for the Deep waveguide in the SMART HS28PC MPW platform.

    Based on original offset model from smart.

    Args:
        width (float): waveguide width
        radius (float): waveguide radius
        wl (float): wavelength
        pol (str): polarization

    Returns:
        float: straight-to-bend offset value
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sboffset_deep",
            json={"width": width, "radius": radius, "wl": wl, "pol": pol},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sboffset_shallow(width: float, radius: float = 0.0, wl: float = 1.55, pol: str = "TE") -> float:
    """Straight-bend for the Shallow waveguide in the SMART HS28PC MPW platform.

    Based on original offset model smart.

    Args:
        width (float): waveguide width
        radius (float): waveguide radius
        wl (float): wavelength
        pol (str): polarization

    Returns:
        float: straight-to-bend offset value
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sboffset_shallow",
            json={"width": width, "radius": radius, "wl": wl, "pol": pol},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def soa_pad(length: float = 250, padwidth: float = 100) -> Type[Cell]:
    """SOA with metal pad for probing.

    Args:
        length (float): SOA length in um
        padwidth (float): metal pad width in um

    Returns:
        Cell: SOA with pad element
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/soa_pad",
            json={"length": length, "padwidth": padwidth},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_eam_rf_dp(length: float = 100) -> Type[Cell]:
    """Basic RF electro-absorption modulator (EAM) connecting to Deep waveguides

    Args:
        length (float): the length of the RF EAM Range in um [30 < 100 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_eam_rf_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_eam_rf_sh(length: float = 100) -> Type[Cell]:
    """Basic RF electro-absorption modulator (EAM) connecting to Shallow waveguides

    Args:
        length (float): the length of the RF EAM Range in um [30 < 100 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_eam_rf_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_eopm_dc_dp(length: float = 1000) -> Type[Cell]:
    """Basic DC electro-optical phase-modulator (EOPM) connecting to Deep waveguides

    Args:
        length (float): the length of the DC EOPM Range in um [30 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_eopm_dc_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_eopm_dc_sh(length: float = 1000) -> Type[Cell]:
    """Basic DC electro-optical phase-modulator (EOPM) connecting to Shallow waveguides

    Args:
        length (float): the length of the DC EOPM Range in um [30 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_eopm_dc_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_eopm_rf_dp(length: float = 1000) -> Type[Cell]:
    """Basic RF electro-optical phase-modulator (EOPM) connecting to deep waveguides

    Args:
        length (float): the length of the RF EOPM Range in um [30 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_eopm_rf_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_pin_dp(length: float = 100) -> Type[Cell]:
    """Basic DC photoDetector, connecting to Deep waveguides.

    Args:
        length (float): the length of the DC photoDetector Range in um [30 < 100 < 500]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_pin_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_pin_rf_dp() -> Type[Cell]:
    """Basic RF photo-detector, connecting to Deep waveguides.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_basic_pin_rf_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_pin_sh(length: float = 100) -> Type[Cell]:
    """Basic DC photoDetector, connecting to Shallow waveguides.

    Args:
        length (float): the length of the DC photoDetector Range in um [30 < 100 < 500]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_pin_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_basic_soa(length: float = 500) -> Type[Cell]:
    """SOA without bond pad

    Args:
        length (float): the length of the SOA Range in um [30 < 500 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_basic_soa", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_cell_id() -> Type[Cell]:
    """Smart Photonics Cell ID (1 required in every unit cell).

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_cell_id", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_d2s() -> Type[Cell]:
    """Transition between Deep and Shallow waveguides.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_d2s", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_dbr_dp(length: float = 500, pitch: float = 0.237) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Deep waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        pitch (float): the pitch of the DBR Range in um [0.23 < 0.237 < 0.25]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_dbr_dp", json={"length": length, "pitch": pitch}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_dbr_dp_ncontact(length: float = 500, pitch: float = 0.237) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Deep waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        pitch (float): the pitch of the DBR Range in um [0.23 < 0.237 < 0.25]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_dbr_dp_ncontact",
            json={"length": length, "pitch": pitch},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_dbr_sh(length: float = 500, pitch: float = 0.237) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Shallow waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        pitch (float): the pitch of the DBR Range in um [0.23 < 0.237 < 0.25]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_dbr_sh", json={"length": length, "pitch": pitch}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_dbr_sh_ncontact(length: float = 500, pitch: float = 0.237) -> Type[Cell]:
    """Distributed Bragg reflector (DBR) grating in a Shallow waveguide.

    Args:
        length (float): the length of the DBR Range in um [10 < 500 < 1500]
        pitch (float): the pitch of the DBR Range in um [0.23 < 0.237 < 0.25]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_dbr_sh_ncontact",
            json={"length": length, "pitch": pitch},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_disc_fiducial() -> Type[Cell]:
    """Fiducial used for chip characterization

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_disc_fiducial", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_eam_rf_dp() -> Type[Cell]:
    """RF electro-optical absorption-modulator (EAM) with GSG pads connecting to deep waveguides

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_eam_rf_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_eam_rf_sh() -> Type[Cell]:
    """RF electro-optical absorption-modulator (EAM) with GSG pads connecting to shallow waveguides

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_eam_rf_sh", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_eopm_dc_dp(length: float = 1000) -> Type[Cell]:
    """This is a deep EOPM with a rectangular pad

    Args:
        length (float): the length of the DC EOPM Range in um [100 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_eopm_dc_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_eopm_dc_dp_ncontact(length: float = 1000) -> Type[Cell]:
    """This is a deep EOPM with a rectangular pad

    Args:
        length (float): the length of the DC EOPM Range in um [100 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_eopm_dc_dp_ncontact", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_eopm_dc_sh(length: float = 1000) -> Type[Cell]:
    """This is a shallow EOPM with a Circular pad

    Args:
        length (float): the length of the DC EOPM Range in um [100 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_eopm_dc_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_eopm_dc_sh_ncontact(length: float = 1000) -> Type[Cell]:
    """This is a shallow EOPM with a Circular pad and ncontact

    Args:
        length (float): the length of the DC EOPM Range in um [100 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_eopm_dc_sh_ncontact", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_eopm_rf_dp(length: float = 1000) -> Type[Cell]:
    """RF electro-optical phase-modulator (EOPM)        with GSG pads connecting to deep waveguides

    Args:
        length (float): the length of the RF EOPM Range in um [200 < 1000 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_eopm_rf_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_gsg_arc(
    angle: float = 90, gap_width: float = 10, gnd_width: float = 10, radius: float = 45, sig_width: float = 10
) -> Type[Cell]:
    """Ground-signal-ground bend for routing electrical RF signals

    Args:
        angle (float): the angle of the GSG bend Range in degrees [0 < 90 < 359]
        gap_width (float): the gap width of the GSG bend Range in um [10 < 10 < 350]
        gnd_width (float): the ground width of the GSG bend Range in um [10 < 10 < 350]
        radius (float): the radius of the GSG bend Range in um [35 < 45 < 1000]
        sig_width (float): the signal width of the GSG bend Range in um [10 < 10 < 350]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_gsg_arc",
            json={
                "angle": angle,
                "gap_width": gap_width,
                "gnd_width": gnd_width,
                "radius": radius,
                "sig_width": sig_width,
            },
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_gsg_pad(
    gap_width: float = 45, gnd_width: float = 45, length: float = 70, sig_width: float = 45
) -> Type[Cell]:
    """Ground-signal-ground pad for probing electrical RF signals

    Args:
        gap_width (float): the gap width of the GSG pad Range in um [10 < 45 < 1000]
        gnd_width (float): the ground width of the GSG pad Range in um [10 < 45 < 1000]
        length (float): the length of the GSG pad Range in um [10 < 70 < 100]
        sig_width (float): the signal width of the GSG pad Range in um [10 < 45 < 1000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_gsg_pad",
            json={"gap_width": gap_width, "gnd_width": gnd_width, "length": length, "sig_width": sig_width},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_gsg_strt(
    gap_width: float = 10, gnd_width: float = 10, length: float = 100, sig_width: float = 10
) -> Type[Cell]:
    """Straight GSG-type RF-line

    Args:
        gap_width (float): the gap width of the straight GSG Range in um [10 < 10 < 1000]
        gnd_width (float): the ground width of the straight GSG Range in um [10 < 10 < 1000]
        length (float): the length of the straight GSG Range in um [10 < 100 < 1000]
        sig_width (float): the signal width of the straight GSG Range in um [10 < 10 < 1000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_gsg_strt",
            json={"gap_width": gap_width, "gnd_width": gnd_width, "length": length, "sig_width": sig_width},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_gsg_taper(
    gap1_width: float = 10,
    gap2_width: float = 62.5,
    gnd1_width: float = 10,
    gnd2_width: float = 45,
    length: float = 50,
    sig1_width: float = 10,
    sig2_width: float = 10,
) -> Type[Cell]:
    """Ground-signal-ground taper for routing electrical RF signals

    Args:
        gap1_width (float): the first gap width of the GSG taper Range in um [10 < 10 < 1000]
        gap2_width (float): the second gap width of the GSG taper Range in um [10 < 62.5 < 1000]
        gnd1_width (float): the first ground width of the GSG taper Range in um [10 < 10 < 1000]
        gnd2_width (float): the second ground width of the GSG taper Range in um [10 < 45 < 1000]
        length (float): the length of the GSG taper Range in um [10 < 50 < 100]
        sig1_width (float): the first signal width of the GSG taper Range in um [10 < 10 < 1000]
        sig2_width (float): the second signal width of the GSG taper Range in um [10 < 10 < 1000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_gsg_taper",
            json={
                "gap1_width": gap1_width,
                "gap2_width": gap2_width,
                "gnd1_width": gnd1_width,
                "gnd2_width": gnd2_width,
                "length": length,
                "sig1_width": sig1_width,
                "sig2_width": sig2_width,
            },
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_iso_dp(length: float = 30) -> Type[Cell]:
    """P-side isolation section in a Deep waveguide

    Args:
        length (float): the length of the isolation section Range in um [10 < 30 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_iso_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_iso_sh(length: float = 30) -> Type[Cell]:
    """P-side isolation section in a Shallow waveguide

    Args:
        length (float): the length of the isolation section Range in um [10 < 30 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_iso_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_mir1p_dp() -> Type[Cell]:
    """A 1-port multi-mode interference reflector (MIR) in Deep waveguides.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_mir1p_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_mir2p_dp() -> Type[Cell]:
    """2-port multi-mode interference reflector (MIR) in Deep waveguides.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_mir2p_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_mmi1x2_dp() -> Type[Cell]:
    """A 1x2 multi-mode interference (MMI) coupler in Deep waveguides.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_mmi1x2_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_mmi2x2_dp() -> Type[Cell]:
    """A 2x2 multi-mode interference (MMI) coupler in Deep waveguides.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_mmi2x2_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_modefilter_sh() -> Type[Cell]:
    """MMI coupler in Shallow waveguides which filters out 1st order mode.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_modefilter_sh", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_ncontact(length: float = 500, width: float = 77) -> Type[Cell]:
    """N-contact on the chip top surface.

    Args:
        length (float): the length of the N-contact Range in um [22 < 500 < 4000]
        width (float): the width of the N-contact Range in um [22 < 77 < 1000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_ncontact",
            json={"length": length, "width": width},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pad_dc_box(length: float = 100) -> Type[Cell]:
    """Square probing pad with rounded corners

    Args:
        length (float): the length of the pad Range in um [10 < 100 < 250]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_pad_dc_box", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pad_dc_circ(diameter: float = 100) -> Type[Cell]:
    """Circular DC pad

    Args:
        diameter (float): the diameter of the pad Range in um [10 < 100 < 250]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_pad_dc_circ", json={"diameter": diameter}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pad_dc_lw(length: float = 100, width: float = 100) -> Type[Cell]:
    """Rounded rectangle DC pad of specified length and width.

    Args:
        length (float): the length of the pad Range in um [10 < 100 < 4000]
        width (float): the width of the pad Range in um [10 < 100 < 250]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_pad_dc_lw",
            json={"length": length, "width": width},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pin_dp(length: float = 100) -> Type[Cell]:
    """Composite DC photo-diode with pad option, connecting to Deep waveguides

    Args:
        length (float): the length of the DC photoDetector Range in um [30 < 100 < 500]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_pin_dp", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pin_dp_ncontact(length: float = 100) -> Type[Cell]:
    """Composite DC photo-diode with pad option, connecting to Shallow waveguides with ncontact

    Args:
        length (float): the length of the DC photoDetector Range in um [30 < 100 < 500]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_pin_dp_ncontact", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pin_rf_dp() -> Type[Cell]:
    """Composite RF photo-diode with RF pad, connecting to Deep waveguides

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_pin_rf_dp", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pin_sh(length: float = 100) -> Type[Cell]:
    """Composite DC photo-diode with pad option, connecting to Shallow waveguides

    Args:
        length (float): the length of the DC photoDetector Range in um [30 < 100 < 500]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_pin_sh", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_pin_sh_ncontact(length: float = 100) -> Type[Cell]:
    """Composite DC photo-diode with pad option, connecting to Shallow waveguides with ncontact

    Args:
        length (float): the length of the DC photoDetector Range in um [30 < 100 < 500]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_pin_sh_ncontact", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_qr_code() -> Type[Cell]:
    """QR code for easy identification

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_qr_code", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_s2d() -> Type[Cell]:
    """Transition between Shallow and Deep waveguides.

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.get(f"{base_url}/sp_s2d", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_soa(length: float = 500) -> Type[Cell]:
    """This is SOA with pad

    Args:
        length (float): the length of the SOA Range in um [30 < 500 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_soa", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def sp_soa_ncontact(length: float = 500) -> Type[Cell]:
    """This is SOA with pad and ncontact

    Args:
        length (float): the length of the SOA Range in um [30 < 500 < 4000]

    Returns:
        Cell
    """
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/sp_soa_ncontact", json={"length": length}, headers=headers, timeout=timeout
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


@ndcache()
def _synchronize_tables() -> dict:
    """Return data without deserializing."""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/synchronize_tables", headers=headers, timeout=timeout)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return response.json()


def synchronize_tables() -> Tables:
    """Function to synchronize PDK tables to the api client.

    Returns:
        nd.Tables: PDK tables
    """
    return from_dict(_synchronize_tables())


@ndcache()
def unitcell(die_width: float = 4600, die_height: float = 4000, cellname: str = "UNIT_CELL_SMART") -> Cell:
    """Create a unitcell for SMART."""
    token_not_expired()
    try:
        response = client.post(
            f"{base_url}/unitcell",
            json={"die_width": die_width, "die_height": die_height, "cellname": cellname},
            headers=headers,
            timeout=timeout,
        )
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


synchronize_tables()


@ndcache()
def _get_deep():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/deep", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


deep = _get_deep()


@ndcache()
def _get_metaldc():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metaldc", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metaldc = _get_metaldc()


@ndcache()
def _get_metaln():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metaln", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metaln = _get_metaln()


@ndcache()
def _get_metalrf():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/metalrf", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


metalrf = _get_metalrf()


@ndcache()
def _get_nisolation():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/nisolation", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


nisolation = _get_nisolation()


@ndcache()
def _get_pinlines():
    """get attribute dict"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/pinlines", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


pinlines = _get_pinlines()


@ndcache()
def _get_shallow():
    """get attribute Interconnect"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/shallow", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


shallow = _get_shallow()


@ndcache()
def _get_technology():
    """get attribute str"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/technology", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


technology = _get_technology()


@ndcache()
def _get_versionbp():
    """get attribute dict"""
    token_not_expired()
    try:
        response = client.get(f"{base_url}/versionbp", headers=headers)
        response.raise_for_status()
    except httpx.HTTPError as err:
        print(f"An HTTP error occurred: {err}")
        if hasattr(err, "response") and isinstance(err.response, httpx.Response):
            try:
                error_message = err.response.json().get("error", "Unknown error")
            except ValueError:
                error_message = "Unknown error"
        else:
            error_message = "Unknown error"
        print(f"Server error: {error_message}")
        return None
    except Exception as err:
        print(f"An error occurred: {err}")
        return None
    return from_dict(data=response.json())


versionbp = _get_versionbp()
if __name__ == "__main__":
    check_server_health()
